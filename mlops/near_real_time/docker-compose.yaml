version: '3.7'

services:
    kafka:
        container_name: kafka
        image: moeenz/docker-kafka-kraft:latest
        environment:
            - KRAFT_CONTAINER_HOST_NAME=${KRAFT_CONTAINER_HOST_NAME}
            - KRAFT_CREATE_TOPICS=${KRAFT_CREATE_TOPICS}
            - KRAFT_PARTITIONS_PER_TOPIC=${KRAFT_PARTITIONS_PER_TOPIC}
        ports:
            - 9093:9093
        restart: always
        healthcheck:
            test: [ 'CMD-SHELL', './bin/kafka-topics.sh --bootstrap-server localhost:9092 --list' ]
            interval: 10s
            timeout: 5s
            retries: 5

    ui:
        container_name: kafka-ui
        image: provectuslabs/kafka-ui:v0.6.1
        environment:
            - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=${KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS}
            - KAFKA_CLUSTERS_0_NAME=${KAFKA_CLUSTERS_0_NAME}
        ports:
            - 8080:8080
        restart: always
        depends_on:
            kafka:
                condition: service_healthy

    producer:
        container_name: kafka-producer
        image: nearrealtime
        build:
            dockerfile: Dockerfile
        command: python -u kafka_producer.py
        environment:
            - KAFKA_SERVERS=${KAFKA_SERVERS}
            - KAFKA_TOPIC_DATA=${KAFKA_TOPIC_DATA}
            - KAFKA_TOPIC_PRED=${KAFKA_TOPIC_PRED}
        restart: always
        depends_on:
            kafka:
                condition: service_healthy

    consumer:
        container_name: kafka-consumer
        image: nearrealtime
        build:
            dockerfile: Dockerfile
        command: python -u kafka_consumer.py
        environment:
            - KAFKA_SERVERS=${KAFKA_SERVERS}
            - KAFKA_TOPIC_DATA=${KAFKA_TOPIC_DATA}
            - KAFKA_TOPIC_PRED=${KAFKA_TOPIC_PRED}
        restart: always
        depends_on:
            kafka:
                condition: service_healthy